name: Test

on:
  push:
    branches:
      - develop
#      - master
#      - staging
      - releases/*
  pull_request:
    branches: [develop, master]
    types: [synchronize, opened, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
#    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: check files
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      test_files: ${{ steps.changes.outputs.run_tests }}
      docker: ${{ steps.changes.outputs.docker_base }}
      python_files: ${{ steps.changes.outputs.python }}
      branch: ${{ steps.extract_branch.outputs.branch }}
      hash: ${{ steps.release_hash.outputs.hash }}
      tags: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
      image_name: ${{ steps.image_name.outputs.name }}
    steps:
      - run: git config --global --add safe.directory $(realpath .)
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - id: changes
        name: Check for backend file changes
        uses: dorny/paths-filter@0bc4621a3135347011ad047f9ecf449bf72ce2bd # v3.0.0
        with:
          base: ${{ github.ref }}
          token: ${{ github.token }}
          filters: .github/file-filters.yml
      - id: extract_branch
        name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      - id: release_hash
        uses: ./.github/actions/distro_hash
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
      - run: echo "======  ${{ toJson(steps.meta.outputs) }} ==="
      - name: Define target image name
        id: image_name
        run: |
          echo ${{github.event_name}}
          echo ${{github.event.pull_request.head.repo.full_name}} 
          echo ${{github.event.pull_request.base.repo.full_name}}
          # needs.setup.outputs.version contains the branch name
          echo "name=${{vars.DOCKER_IMAGE}}:test-${{steps.meta.outputs.version}}" >> $GITHUB_OUTPUT

      - run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          echo "${{inputs.image}}"
          echo "${{inputs.force}}"
          echo "${{inputs.force}} == 'false'"
      - id: release_hash
        uses: ./.github/actions/distro_hash
      - id: image_updated
        name: Check if image exists
#        if: ${{ !inputs.force }}
        uses: ./.github/actions/image_updated
        with:
          image: "${{inputs.image}}"
          checksum: ${{ steps.release_hash.outputs.hash }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
      - id: setup
#        if: ${{ steps.image_updated.outputs.exists == 'false' || inputs.force }}
        name: setup
        run: |
          tag="${{ inputs.image }}"
          build_date=$(date +"%Y-%m-%d %H:%M")
          echo "date=$build_date" >> $GITHUB_OUTPUT
          echo "image=${tag%:*}" >> $GITHUB_OUTPUT
      - name: Setup Environment (PR)
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |  
          echo "LAST_COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> ${GITHUB_ENV}
      - name: Setup Environment (Push)
        if: ${{ github.event_name == 'push' }}
        shell: bash
        run: |  
          echo "LAST_COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
      - run: |
          echo "====================================="
          echo date: ${{steps.setup.outputs.date}}
          echo image: ${{steps.setup.outputs.image}}
          echo tag: ${{inputs.image}}
          echo target: ${{ inputs.target }}
          echo checksum: ${{inputs.checksum}}
          echo image_exists: ${{steps.image_updated.outputs.exists}}
          echo build_number: ${{steps.image_updated.outputs.build_number}}
          echo force: ${{inputs.force}}
          echo build: ${{ steps.image_updated.outputs.exists != 'true' || inputs.force == 'true' }}
          echo "====================================="