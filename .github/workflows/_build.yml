name: "[CALL] Build"

on:
  workflow_call:
    inputs:
      image:
        description: "Image name to build and push"
        required: true
        type: string
        default: false
      checksum:
        description: "Dependencies checksum to check to evaluate build"
        required: false
        type: string
        default: false
      target:
        description: "Dockerfile stage to stop to"
        required: true
        type: string
        default: "-"
      force:
        description: "Force rebuild event is checksum matches"
        required: false
        type: boolean
        default: false
      dry_run:
        description: "Force rebuild event is checksum matches"
        required: false
        type: boolean
        default: false

jobs:
  builder:
    name: Build Image
    runs-on: ubuntu-22.04
    outputs:
      hash: ${{ steps.release_hash.outputs.hash }}
      updated: ${{ steps.image_updated.outputs.exists }}
      image: ${{ steps.setup.outputs.image }}
      built: ${{ steps.release_hash.outputs.hash }}
    environment:
      DOCKER_DEFAULT_PLATFORM=linux/amd64
    steps:
      - run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          echo "${{inputs.image}}"
          echo "${{inputs.force}}"
          echo "${{inputs.force}} == 'false'"
      - id: release_hash
        uses: ./.github/actions/distro_hash
      - id: image_updated
        name: Check if image exists
#        if: ${{ !inputs.force }}
        uses: ./.github/actions/image_updated
        with:
          image: "${{inputs.image}}"
          checksum: ${{ steps.release_hash.outputs.hash }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
      - id: setup
#        if: ${{ steps.image_updated.outputs.exists == 'false' || inputs.force }}
        name: setup
        run: |
          tag="${{ inputs.image }}"
          build_date=$(date +"%Y-%m-%d %H:%M")
          echo "date=$build_date" >> $GITHUB_OUTPUT
          echo "image=${tag%:*}" >> $GITHUB_OUTPUT
      - name: Setup Environment (PR)
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |  
          echo "LAST_COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> ${GITHUB_ENV}
      - name: Setup Environment (Push)
        if: ${{ github.event_name == 'push' }}
        shell: bash
        run: |  
          echo "LAST_COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
      - run: |
          echo "====================================="
          echo date: ${{steps.setup.outputs.date}}
          echo image: ${{steps.setup.outputs.image}}
          echo tag: ${{inputs.image}}
          echo target: ${{ inputs.target }}
          echo checksum: ${{inputs.checksum}}
          echo image_exists: ${{steps.image_updated.outputs.exists}}
          echo build_number: ${{steps.image_updated.outputs.build_number}}
          echo force: ${{inputs.force}}
          echo build: ${{ steps.image_updated.outputs.exists != 'true' || inputs.force == 'true' }}
          echo "====================================="
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
          driver: docker-container
          driver-opts: 'image=moby/buildkit:v0.10.5'
      - name: Build and push
        if: ${{ steps.image_updated.outputs.exists != 'true' || inputs.force == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ inputs.image }}
          target: ${{ inputs.target }}
          file: ./docker/Dockerfile
          platforms: linux/amd64
          outputs: type=registry
          cache-from: "type=registry,ref=${{inputs.image}}"
          cache-to: "type=registry,ref=${{inputs.image}}-buildcache,mode=max"
          labels: BuildNumber=${{ steps.setup.outputs.build_number }},
          build-args: |
            BUILD_DATE=${{ steps.setup.outputs.date }}
            CHECKSUM=${{ steps.release_hash.outputs.hash }}
            VERSION=${{ steps.version.outputs.version }}
            SOURCE_COMMIT=${LAST_COMMIT_SHA::7}
      - name: Dump Image Info
        run: |
          echo "Pulling... ${{ inputs.image }}"
          docker pull ${{ inputs.image }}
          echo "----------"
          docker inspect --format='{{json .Config.Labels}}' ${{ inputs.image }}
          docker run -t ${{ inputs.image }} release-info.sh
          echo "----------"
#          image: ${{ steps.setup.outputs.image }}
