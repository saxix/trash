name: Run Tests

on:
    push:
      branches:
      - develop
      - releases/*
      - master/*

env:
  DOCKER_DEFAULT_PLATFORM: linux/amd64


jobs:

  files-changed:
    name: check files
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      test_files: ${{ steps.changes.outputs.run_tests }}
      docker_files: ${{ steps.changes.outputs.docker_base }}
      python_files: ${{ steps.changes.outputs.python }}
    steps:
      - run: git config --global --add safe.directory $(realpath .)
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - id: changes
        name: Check for backend file changes
        uses: dorny/paths-filter@0bc4621a3135347011ad047f9ecf449bf72ce2bd # v3.0.0
        with:
          base: ${{ github.ref }}
          token: ${{ github.token }}
          filters: .github/file-filters.yml

  build:
    name: Build Image
    runs-on: ubuntu-20.04
    needs: [ files-changed ]
    outputs:
      hash: ${{ steps.release_hash.outputs.hash }}
    steps:
      - run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: release_hash
        uses: ./.github/actions/distro_hash
      - id: image_exists
        name: Check if image exists
        if: ${{ !contains(github.event.head_commit.message, 'ci:rebuild') }}
        uses: ./.github/actions/image_updated
        with:
          image: ${{vars.DOCKER_IMAGE}}:dev-latest
          checksum: ${{ steps.release_hash.outputs.hash }}
      - id: build_date
        name: Get version
        if: ${{ steps.image_exists.outputs.exists == 'false' || contains(github.event.head_commit.message, 'ci:rebuild') }}
        run: |
          build_date=$(date +"%Y-%m-%d %H:%M")
          echo "date=$build_date" >> $GITHUB_OUTPUT
      - uses: docker/login-action@v3
        if: ${{ steps.image_exists.outputs.exists == 'false' || contains(github.event.head_commit.message, 'ci:rebuild') }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        if: ${{ steps.image_exists.outputs.exists == 'false' || contains(github.event.head_commit.message, 'ci:rebuild') }}
        uses: docker/build-push-action@v5
        with:
          context: .
          image: ${{vars.DOCKER_IMAGE}}
          tags: ${{vars.DOCKER_IMAGE}}:dev-${{ steps.release_hash.outputs.hash }},${{vars.DOCKER_IMAGE}}:dev-latest
          file: ./docker/Dockerfile
          platforms: linux/amd64
          cache-from: type=registry,ref=${{vars.DOCKER_IMAGE}}:dev-latest
          cache-to: type=inline
          outputs: type=registry
          target: python_dev_deps
          build-args: |
            BUILD_DATE="${{ steps.build_date.outputs.date }}"
            CHECKSUM="${{ steps.release_hash.outputs.hash }}"
            VERSION="${{ steps.version.outputs.version }}"
      - name: Dump Image Info
        run: |
          docker pull ${{vars.DOCKER_IMAGE}}:dev-latest
          echo "----------"
          docker inspect --format='{{json .Config.Labels}}' ${{vars.DOCKER_IMAGE}}:dev-latest
          docker run -t ${{vars.DOCKER_IMAGE}}:dev-latest release-info.sh
          echo "----------"

  lint:
    if: ${{ steps.changes.outputs.python || contains(github.event.head_commit.message, 'ci:lint') }}
    runs-on: ubuntu-20.04
    needs: [ build ]
    container:
      image: saxix/trash:dev-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Black
        run: black --check src/
      - name: Flake8
        run: flake8 src/
      - name: iSort
        run: isort --check-only src/

  security:
    runs-on: ubuntu-20.04
    needs: [ build, lint ]
    container:
      image: saxix/trash:dev-latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Bandit
        run: bandit src/

  test:
    needs: [ build, lint, security ]
    runs-on: ubuntu-20.04
    services:
      redis:
        image: redis
      db:
        image: postgres:14
        env:
          POSTGRES_DATABASE: dedupe
          POSTGRES_PASSWORD: postgres
          POSTGRES_USERNAME: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:postgres@db:5432/dedupe
      SECRET_KEY: secret_key
      CACHE_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run tests
        run: |
          docker run --rm \
            -v $PWD:/code/app \
            -w /code/app \
            -t ${{vars.DOCKER_IMAGE}}:dev-latest \
          pytest tests -v --cov --cov-report xml:coverage.xml
      #            ls coverage.xml
      #        - uses: actions/upload-artifact@master
      #          with:
      #            name: coverage
      #            path: coverage.xml
      #            compression-level: 0
      #            overwrite: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          files: coverage.xml
          working_directory: /code/src/
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: false
          name: codecov-${{env.GITHUB_REF_NAME}}

  version:
    runs-on: ubuntu-20.04
    steps:
      - id: version
        uses: ./.github/actions/version

#
#    teardown:
#      needs: [test]
#      runs-on: ubuntu-20.04
#      steps:
#        - uses: actions/download-artifact@v4
#          with:
#            name: coverage
#            path: coverage.xml
#        - name: Upload coverage to Codecov
#          uses: codecov/codecov-action@v4
#          with:
#            directory: ./coverage/reports/
#            env_vars: OS,PYTHON
#            fail_ci_if_error: true
#            files: coverage.xml
#            flags: unittests
#            name: codecov-umbrella
#            token: ${{ secrets.CODECOV_TOKEN }}
#            verbose: true